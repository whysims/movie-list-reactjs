{"version":3,"sources":["common/consts.js","components/movieCard/movieCard.jsx","services/tmdb-api.js","components/navBar/navBar.jsx","components/notFound/notFound.jsx","components/homeLayout/homeLayout.jsx","components/movieDetails/movieDetails.jsx","components/loading/loading.jsx","routes.js","history.js","components/ScrollToTop/ScrollToTop.jsx","App.js","serviceWorker.js","index.js"],"names":["TMDB_API_URL","TMDB_IMG_URL","API_KEY","withRouter","props","vote_average","poster_path","popularity","className","style","backgroundImage","getMovieDetails","id","a","async","fetch","then","res","json","catch","e","searchMovies","query","useStyles","makeStyles","theme","root","flexGrow","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","width","breakpoints","up","spacing","searchIcon","height","pointerEvents","display","alignItems","justifyContent","inputRoot","color","navToolBar","inputInput","padding","transition","transitions","create","NavBar","history","useHistory","useState","searchResult","setSearchResult","classes","AppBar","Container","Toolbar","to","InputBase","placeholder","input","inputProps","onChange","event","length","result","searchMovie","target","value","Paper","results","map","x","key","onClick","push","title","sort","b","NotFound","src","alt","MovieCard","React","lazy","popularMovies","setPopularMovies","useEffect","console","error","retrievePopularMovies","Grid","container","justify","fallback","item","backButton","zIndex","flexDirection","fontSize","cursor","backText","MovieDetails","movieDetails","setMovieDetails","match","params","fetchMovieDetails","Box","backdrop_path","xs","overview","Intl","NumberFormat","currency","format","budget","vote_count","Loading","routes","path","component","HomeLayout","exact","createBrowserHistory","oldProps","setOldProps","location","window","scrollTo","children","RouteWithSubRoutes","route","render","AnimateRoute","useLocation","TransitionGroup","CSSTransition","classNames","timeout","i","App","basename","Component","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.35ade55f.chunk.js","sourcesContent":["export const TMDB_API_URL = \"https://api.themoviedb.org/3/\";\nexport const TMDB_IMG_URL = \"https://image.tmdb.org/t/p/original\";\nexport const API_KEY = 'e8637682cec2807cb24a87897b889da7';\n","import React from \"react\";\nimport { withRouter } from \"react-router\";\nimport { TMDB_IMG_URL } from \"../../common/consts\";\nimport GradeIcon from \"@material-ui/icons/Grade\";\nimport ThumbUpAltIcon from \"@material-ui/icons/ThumbUpAlt\";\nimport \"./movieCard.scss\";\n\nconst MovieCard = props => {\n  const { vote_average, poster_path, popularity } = props;\n\n  return (\n    <div\n      className=\"movie-card\"\n      style={{ backgroundImage: `url(${TMDB_IMG_URL}${poster_path})` }}\n    >\n      <span className=\"movie-card--popularity\">\n        <ThumbUpAltIcon /> {popularity}\n      </span>\n      <span className=\"movie-card--avg\">\n        <GradeIcon /> {vote_average}\n      </span>\n      <div className=\"movie-card--overlay\"></div>\n    </div>\n  );\n};\nexport default withRouter(MovieCard);\n","import { TMDB_API_URL, API_KEY } from \"../common/consts\";\n\nexport const getPopularMovies = async () => {\n  return await fetch(\n    `${TMDB_API_URL}movie/popular?api_key=${API_KEY}&language=en-US&page=1`\n  )\n    .then(res => res.json())\n    .then(res => res)\n    .catch(e => console.error(e));\n};\n\nexport const getMovieDetails = async id => {\n  return await fetch(`${TMDB_API_URL}movie/${id}?api_key=${API_KEY}`)\n    .then(res => res.json())\n    .then(res => res)\n    .catch(e => e);\n};\n\nexport const searchMovies = async query => {\n  return await fetch(\n    `${TMDB_API_URL}search/movie?api_key=${API_KEY}&query=${query}`\n  )\n    .then(res => res.json())\n    .then(res => res)\n    .catch(e => e);\n};\n","import React, { useState } from \"react\";\nimport MovieFilterIcon from \"@material-ui/icons/MovieFilter\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { AppBar, Container, Toolbar } from \"@material-ui/core\";\nimport { fade, makeStyles } from \"@material-ui/core/styles\";\nimport { searchMovies } from \"../../services/tmdb-api\";\nimport \"./navBar.scss\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    \n  },\n  search: {\n    position: \"relative\",\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    \"&:hover\": {\n      backgroundColor: fade(theme.palette.common.white, 0.25)\n    },\n    marginLeft: 0,\n    width: \"100%\",\n    [theme.breakpoints.up(\"sm\")]: {\n      marginLeft: theme.spacing(1),\n      width: \"auto\"\n    }\n  },\n  searchIcon: {\n    width: theme.spacing(7),\n    height: \"100%\",\n    position: \"absolute\",\n    pointerEvents: \"none\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  inputRoot: {\n    color: \"inherit\"\n  },\n  navToolBar: {\n    display: \"flex\",\n    justifyContent: \"space-between\"\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 7),\n    transition: theme.transitions.create(\"width\"),\n    width: \"100%\",\n    [theme.breakpoints.up(\"sm\")]: {\n      width: 120,\n      \"&:focus\": {\n        width: 200\n      }\n    }\n  }\n}));\n\nconst NavBar = () => {\n  const history = useHistory();\n  const [searchResult, setSearchResult] = useState();\n  const classes = useStyles();\n\n  const showMovieDetails = id => {\n    setSearchResult(null);\n    history.push(`/movie/${id}`);\n    return;\n  };\n\n  const searchMovie = async query => {\n    if (!query.length) setSearchResult(null);\n\n    if (query.length >= 3) {\n      const result = await searchMovies(query);\n      setSearchResult(result);\n    }\n  };\n\n  return (\n    <AppBar className=\"movie-information-nav\">\n      <Container>\n      <Toolbar className={classes.navToolBar}>\n        <Link to=\"/\">\n          <MovieFilterIcon /> Movie Information\n        </Link>\n        <div className={classes.search}>\n          <div className={classes.searchIcon}>\n            <SearchIcon />\n          </div>\n          <InputBase\n            placeholder=\"Search…\"\n            classes={{\n              root: classes.inputRoot,\n              input: classes.inputInput\n            }}\n            inputProps={{ \"aria-label\": \"search\" }}\n            onChange={event => searchMovie(event.target.value)}\n          />\n          {searchResult && (\n            <Paper className=\"search-result\">\n              <ul>\n                {searchResult.results\n                  .map(x => (\n                    <li key={x.id} onClick={() => showMovieDetails(x.id)}>\n                      {x.title}\n                    </li>\n                  ))\n                  .sort((a, b) => a.popularity < b.popularity)}\n              </ul>\n            </Paper>\n          )}\n        </div>\n      </Toolbar>\n      </Container>\n    </AppBar>\n  );\n};\nexport default NavBar;\n","import React from \"react\";\n\nconst NotFound = () => {\n  return (\n    <div>\n      <img\n        src=\"https://media.giphy.com/media/BCPGshhOo1xqU/giphy.gif\"\n        alt=\"Not found GIF\"\n      />\n    </div>\n  );\n};\n\nexport default NotFound;\n","import React, { Fragment, useState, useEffect, Suspense } from \"react\";\nimport { Loading } from \"../../components\";\nimport { Container, Grid } from \"@material-ui/core\";\nimport { getPopularMovies } from \"../../services/tmdb-api\";\nimport { useHistory, withRouter } from \"react-router\";\n\nconst MovieCard = React.lazy(() =>\n  import(\"../../components/movieCard/movieCard\")\n);\n\nconst HomeLayout = () => {\n  const history = useHistory();\n  const [popularMovies, setPopularMovies] = useState();\n\n  const retrievePopularMovies = async () => {\n    const { results } = await getPopularMovies();\n    setPopularMovies(results);\n  };\n\n  const movieDetails = id => {\n    history.push(`/movie/${id}`)\n    return;\n  };\n\n  useEffect(() => {\n    if (!popularMovies) {\n      retrievePopularMovies();\n    }\n  }, [popularMovies]);\n\n  return (\n    <Fragment>\n      <Container className=\"movie-container\">\n        <Grid container spacing={4} justify=\"center\">\n          <Suspense fallback={<Loading />}>\n            {popularMovies &&\n              popularMovies.map(x => (\n                <Grid item key={x.id} onClick={() => movieDetails(x.id)}>\n                  <MovieCard {...x} />\n                </Grid>\n              ))}\n          </Suspense>\n        </Grid>\n      </Container>\n    </Fragment>\n  );\n};\n\nexport default withRouter(HomeLayout);\n","import React, { useState, Fragment } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport Container from \"@material-ui/core/Container\";\nimport FavoriteBorderOutlinedIcon from \"@material-ui/icons/FavoriteBorderOutlined\";\nimport StarsOutlinedIcon from \"@material-ui/icons/StarsOutlined\";\nimport MonetizationOnOutlinedIcon from \"@material-ui/icons/MonetizationOnOutlined\";\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport { TMDB_IMG_URL } from \"../../common/consts\";\nimport { getMovieDetails } from \"../../services/tmdb-api\";\nimport \"./movieDetails.scss\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { useHistory } from \"react-router\";\n\nconst useStyles = makeStyles(({\n  backButton: {\n    zIndex: 30,\n    position: \"relative\",\n    display: \"inline-flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    fontSize: \"28px\",\n    color: \"white\",\n    cursor: \"pointer\"\n  },\n  backText: {\n    marginLeft: 10\n  }\n}));\nconst MovieDetails = props => {\n  const classes = useStyles();\n  const history = useHistory();\n\n  const [movieDetails, setMovieDetails] = useState();\n  const id = props.match.params.id;\n\n  const fetchMovieDetails = async () => {\n    const res = await getMovieDetails(id);\n    setMovieDetails(res);\n  };\n\n  if (id && !movieDetails) {\n    fetchMovieDetails();\n  }\n\n  return (\n    <Fragment>\n      {movieDetails && (\n        <Box\n          className=\"movie-details\"\n          style={{\n            backgroundImage: `url(${TMDB_IMG_URL}${movieDetails.backdrop_path})`\n          }}\n        >\n          <Container>\n           <div className={classes.backButton} onClick={() => history.push(\"/\")}>\n            <ArrowBackIcon/>\n            <span className={classes.backText}>Back</span>\n          </div>\n            <Grid container>\n              <Grid item xs={6} className=\"content\">   \n                <h1 className=\"title\">{movieDetails.title}</h1>\n                <p className=\"overview\">{movieDetails.overview}</p>\n                <div className=\"details\">\n                  <div className=\"infos\">\n                    <MonetizationOnOutlinedIcon className=\"icon\" />\n                    <p>Budget</p>\n                    {new Intl.NumberFormat(\"en-US\", {\n                      style: \"currency\",\n                      currency: \"USD\"\n                    }).format(movieDetails.budget)}\n                  </div>\n                  <div className=\"infos\">\n                    <StarsOutlinedIcon className=\"icon\" />\n                    <p>Votes</p>\n                    {movieDetails.vote_count} {movieDetails.vote_average}\n                  </div>\n                  <div className=\"infos\">\n                    <FavoriteBorderOutlinedIcon className=\"icon\" />\n                    <p>Popularity</p>\n                    {movieDetails.popularity}\n                  </div>\n                </div>\n              </Grid>\n              <Grid item xs={6} className=\"poster\">\n                <img\n                  src={`${TMDB_IMG_URL}${movieDetails.poster_path}`}\n                  alt={movieDetails.title}\n                />\n              </Grid>\n            </Grid>\n          </Container>\n        </Box>\n      )}\n    </Fragment>\n  );\n};\nexport default MovieDetails;\n","import React from \"react\";\nimport \"./loading.scss\";\n\nconst Loading = () => {\n  return (\n    <div className=\"lds-grid\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\nexport default Loading;\n","import { NotFound, HomeLayout, MovieDetails } from \"./components\";\n\nexport const routes = [\n  {\n    path: \"/\",\n    component: HomeLayout,\n    exact: true\n  },\n  {\n    path: \"/movie/:id\",\n    component: MovieDetails,\n    exact: true\n  },\n  // { path: \"/search/:query\", component: SearchMovies},\n  {\n    path: \"*\",\n    component: NotFound\n  }\n];\n","import { createBrowserHistory } from \"history\";\nexport default createBrowserHistory();","import { useEffect, useState } from \"react\"\nimport { withRouter } from \"react-router\";\n\nconst ScrollToTop = (props) => {\n    const [oldProps, setOldProps] = useState(props);\n\n    useEffect(() => {\n        if (props) {\n            setOldProps(props);\n        if (props.location !== oldProps.location) {\n            window.scrollTo(0, 0)\n          }\n        }\n    },[props, oldProps]);\n\n    return props.children;\n}\n  \nexport default withRouter(ScrollToTop)","import React from \"react\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\nimport { NavBar } from \"./components\";\nimport { routes } from \"./routes\";\nimport { HashRouter, Switch, Route, useLocation } from \"react-router-dom\";\nimport history from \"./history\";\nimport ScrollToTop from \"./components/ScrollToTop/ScrollToTop\";\n\nconst RouteWithSubRoutes = route => (\n  <Route\n    path={route.path}\n    render={props => <route.component {...props} routes={route.routes} />}\n  />\n);\n\nconst AnimateRoute = () => {\n  let location = useLocation();\n\n  return (\n    <TransitionGroup>\n      <CSSTransition key={location.key} classNames=\"fade\" timeout={500}>\n        <Switch location={location}>\n          {routes.map((route, i) => (\n            <RouteWithSubRoutes key={route.path} {...route} />\n          ))}\n        </Switch>\n      </CSSTransition>\n    </TransitionGroup>\n  );\n};\nexport default class App extends React.Component {\n  render() {\n    return (\n      <HashRouter basename=\"/\" history={history}>\n        <ScrollToTop>\n          <NavBar />\n          <AnimateRoute />\n        </ScrollToTop>\n      </HashRouter>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}